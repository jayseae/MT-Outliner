MT-Outliner: Access information from OPML files through template tags.
A Plugin for Movable Type

Release 2.0.0
June 1, 2004

http://jayseae.cxliv.org/outliner/
http://www.amazon.com/o/registry/2Y29QET3Y472A/

If you find the software useful or even like it, then a simple 'thank you'
is always appreciated.  A reference back to me is even nicer.  If you find
a way to make money from the software, do what you feel is right.

Copyright 2003-2004, Chad Everett (software@jayseae.cxliv.org)
Licensed under the Open Software License version 2.1

*** -------------------------------------------------------------------- ***

This Movable Type plugin allows you to process an OPML file and pull in the
information contained within by using MT template tags.

*** -------------------------------------------------------------------- ***

Upgrade notes and warnings:

Version 2.0.0 uses a new architecture.  It requires the use of XML::Twig, which
in turns requires XML::Parser.  If you are unable to use XML::Twig, you can
still make use of version 1.3.0.

*** -------------------------------------------------------------------- ***

Installation:

To install, place the Outliner.pl file in your Movable Type "plugins"
directory.  If you do not have a Movable Type plugins directory, create one,
then put the Outliner.pl file in it.  Refer to the Movable Type documentation
for more information regarding plugins.

  MT_DIR/plugins/Outliner.pl

The functionality in MT-Outliner requires the use of the LWP::UserAgent and 
the HTTP::Request modules, so you'll need to make sure they are installed on
your web host.

The functionality in MT-Outliner version 2 requires the use of the XML::Twig
module, so you'll need to make sure that is installed too.  If it's in your
EXTLIB, that is just fine - so long as the plugin can get to it, it will work.

  http://search.cpan.org/src/MIROD/XML-Twig-3.15/Twig.pm

If you've never installed a module in EXTLIB, here's how:

Get a copy of each module needed.  The first part of the package name (in
this case, XML), indicates the directory.  Create an XML directory under
the extlib directory in your primary MT directory.

The second part of the package name is the file name.  Save the module as
Twig.pm in the XML directory that you just created, so that the path looks
like:

  MT_DIR/extlib/XML/Twig.pm

The XML::Twig module requires the XML::Parser module.  If you do not have 
this module installed, you'll need to install it (or have your web host do it 
for you).  This module does not support loading through the use of EXTLIB.  

*** -------------------------------------------------------------------- ***

Loading an OPML File for Processing:

  <MTOutliner>

This tag offers three attributes for retrieving data in OPML format.

The first attribute makes use of your Bloglines user ID or email address to
retrieve your subscriptions from the Export function of Bloglines.  If you 
choose this option, make sure that all subscriptions you'd like to see are
made public, or else your OPML file may be incomplete.  To retrieve an export
from Bloglines, simply add the bloglines attribute to the tag:

  <MTOutliner bloglines="userid">

The value specified for the bloglines attribute can be either the user id or
the email address associated with your account.

If you would like to use any old OPML file, then you can also specify that by
the use of an attribute on the MTOutliner tag.  The only catch is that the
file must be available via URL:

  <MTOutliner opmllink="http://example.com/path/to/file/opml">

If you cannot access, or would prefer not to access, your OPML file via URL,
then you may want to make use of a different attribute on the MTOutliner tag:

  <MTOutliner opmlpath="/home/user/html/path/to/file/opml">

*** NOTE: If you specify a value for the bloglines attribute, then the
opmllink attribute will be ignored.  If you specify a value for the opmllink
attribute, then the opmlpath attribute will be ignored!

Tags to Retrieve Document-level Data:

  <$MTOutlinerBloglines$> = The Bloglines user ID specified.
  <$MTOutlinerDataSource$> = The URL or path to the OPML document.
  <$MTOutlinerDateCreated$> = The date the document was created.
  <$MTOutlinerDateModified$> = The date the document was modified.
  <$MTOutlinerOPMLVersion$> = Version of OPML used in the document.
  <$MTOutlinerOwnerName$> = The name of the owner of the document.
  <$MTOutlinerOwnerEmail$> = The email of the owner of the document.
  <$MTOutlinerTitle$> = The title of the document.
  <$MTOutlinerXMLVersion$> = Version of XML used in the document.

The OPML file contains some information in the header of the document that
may be of interest to you.  Using these tags, you can pull that information
into your template for display.  These tags must be used within the
MTOutliner container.

With the exception of the MTOutlinerBloglines tag, each of these values comes
from the document itself.  So if the values are not included in the document,
they are not available through the tags!  The two date tags will accept the
MT format tags for displaying a variety of values.

The MTOutliner tag accepts one more attribute that allows you to customize
the message received when a document-level value has not been specified.  By
default, when an attribute is missing the tag will return "Not Found".

By adding the notfound attribute to the tag, you can say whatever you like:

  <MTOutliner bloglines="userid" notfound="Where Is It?">

This attribute applies only to these document-level tags.

*** -------------------------------------------------------------------- ***

The Folders Container:

  <MTOutlinerFolders>

Within the MTOutliner tag, you'll likely want to display something.  Using
the MTOutlinerFolders container, you can list each of the folders found in
your document.

The MTOutlinerFolders tag accepts two attributes.

The "unfiled" attribute has been deprecated and is no longer supported.  In
order to show entries that are not filed in a top-level folder, do not use
the MTOutlinerFolders container.

Using the "folders" attribute, you can specify a folder or a list of folders
to include in the output.  By default, all folders are included.  If you'd
like to limit the folders, specify them by using this attribute:

  <MTOutlinerFolders folders="Folder 1:Folder 2:Folder 3">

Separate multiple folders with colons.  You can use the folders attribute to
select folders and also use the unfiled attribute to include the top-level
entries that are not filed in folders.  You should not that the strings that
you specify with this attribute are not exact.  If a folder contains any part
of that value, it will be included.  For instance, if you use something like:

  <MTOutlinerFolders folders="Folder">

Then the output will include the contents of any folder that includes the word
'folder' in it's name (New Folder, My Folder, Your Folder, etc).

Within this container, there are several conditional tags to control the data
that is output:

  <MTOutlinerFolderIfItems> = Display if the current folder contains items.
  <MTOutlinerFolderIfNoItems> = Display if the current folder contains no items.
  <MTOutlinerFolderIfSubs> = Display if the current folder contains folders.
  <MTOutlinerFolderIfNoSubs> = Display if the current folder contains no folders.

The <MTOutlinerFolderFiled> and <MTOutlinerFolderUnfiled> containers have been
deprecated, and should no longer be used.

Tags to Retrieve Folder-level Data:

  <$MTOutlinerFolderText$> = The text value of the folder (title used if no text).
  <$MTOutlinerFolderItemCount$> = The count of items within the folder.
  <$MTOutlinerFolderSubsCount$> = The count of folders within the folder.

*** -------------------------------------------------------------------- ***

The Items Container:

  <MTOutlinerItems>

This tag can be used on it's own inside the MTOutliner tag, in which case it
will display all individual items (but no folder information), or it can be
used within the MTOutlinerFolder container, in which case it will display
the items contained within that folder.

This container has one optional attribute, the value of which (or absence of)
is used to determine the sort order of the items contained in your OPML file.
To keep the order just as it is in the OPML file, you can just ignore this
attribute.  If you'd like to sort the items in the OPML file, set the value
of this attribute to determine how you would like those items sorted.

  <MTOutlinerItems sorted="case">
  <MTOutlinerItems sorted="nocase">

Setting the value of the sorted attribute to "case" will sort the items in
case order - in Perl this generally means capital letters, and then lower-
case letters.  Setting the value of this attribute to "nocase" will ignore
the case of the letters when items are sorted.  The sort is performed on the
OutlinerItemText field (described below).

If your text (or title) field begins with a special character (~[](), etc),
the sort order may not be what you expect.

Tags to Retrieve Item-level Data:

  <$MTOutlinerItemText$> = The text value of the item (title used if no text).
  <$MTOutlinerItemDesc$> = The description value of the item.
  <$MTOutlinerItemHTML$> = The htmlurl value of the item (url user if no htmlurl).
  <$MTOutlinerItemXML$> = The xmlurl value of the item.

*** -------------------------------------------------------------------- ***

Recursive Data:

Version 2.0.0 of MT-Outliner brings with it a new architecture.  This architecture
allows for multiple levels of folders.  To use these levels, there is another
tag.  This tag repeats the markup contained within the MTOutliner block, but it
does so for the next level down (and the next level, and the next level).

  <$MTOutlinerRecurse$>

To use this tag, simply place it after the text you'd like to reproduce on each
loop through the data.  For instance, to create a simple list of folders, with
the items indented in an additional list, you might use something like:

  <MTOutliner bloglines="userid">
    <ul>
      <MTOutlinerFolders>
      <li><$MTOutlinerFolderText$>
        <ul>
          <MTOutlinerItems>
          <li><a href="<$MTOutlinerItemHTML$>"><$MTOutlinerItemText$></a></li>
          </MTOutlinerItems>
        </ul>
      </MTOutlinerFolders>
    </ul>
  </MTOutliner>

This will produce results that look like this:

  Folder 1
    Item 1
    Item 2
  Folder 2
    Item 3
    Item 4
  Folder 3
    Item 5

To repeat this for each level of data, make one simple change to the markup:

  <MTOutliner bloglines="userid">
    <ul>
      <MTOutlinerFolders>
      <li><$MTOutlinerFolderText$>
        <ul>
          <MTOutlinerItems>
          <li><a href="<$MTOutlinerItemHTML$>"><$MTOutlinerItemText$></a></li>
          </MTOutlinerItems>
          <$MTOutlinerRecurse$>  <--- This is the change!
        </ul>
      </MTOutlinerFolders>
    </ul>
  </MTOutliner>

And when you process OPML with multiple levels, you'll instead see something
like this:

  Folder 1
    Item 1
    Item 2
    Folder 1a
      Item 6a
      Item 7a
      Folder 1b
        Item 9b
  Folder 2
    Item 3
    Item 4
  Folder 3
    Item 5
    Folder 3a
      Item 8a

You'll notice that in this example the folders show up at the end of the item
list for the enclosing folder.  This is because that's where the tag was placed
in the markup.  You can experiment with moving the tag around, but it seems to 
work most reliably at the end.  If you place it before other sections, you
may not get the results you want.

This is because certain values, like the items within the folder, aren't built
until the end of the loop - so if you process recursive levels first, those
items will take over, and the top level items won't get built as expected.

*** -------------------------------------------------------------------- ***

You can use this plugin to create a simple blogroll from your OPML file:

  <MTOutliner opmllink="http://example.com/path/to/file/opml">
    <MTOutlinerItems>
      <a href="<$MTOutlinerItemHTML$>"><$MTOutlinerItemText$></a>
      <a href="<$MTOutlinerItemXML$>">Syndicate this Site</a><br />
    </MTOutlinerItems>
  </MTOutliner>

By making use of the folder container, the conditional tags and the other
attributes, you can customize your blogroll in most any way you can imagine!

*** -------------------------------------------------------------------- ***

I've tested this plugin with the Bloglines export, some Manila-generated OPML
files, a file I believe came from SharpReader's export function, an OPML file
from NetNewsWire, the Newsgator online export and even the OPML file generated
by Feedster's search.  If you come across any problems in these formats, or if
you have another format that doesn't seem to be working, please send me the
information so I can fix the plugin or add support for the format you use.

*** -------------------------------------------------------------------- ***

Changelog:
2.0.0
  - Rewrite to parse XML and allow recursive folders.
  - June 1, 2004
1.3.0
  - Fixed problem with files using both carriage returns and line feeds.
  - February 21, 2004
1.2.0
  - Added opmlpath attribute.
  - Added MTOutlinerDataSource tag.
  - Fixed problem with carriage returns in descriptions.
  - Fixed problem with HTML in item descriptions.
  - February 19, 2004
1.1.0
  - Added sorted attribute for items.
  - December 30, 2003
1.0.1
  - Fixed problem parsing Feedster OPML
  - Fixed internal version number
  - October 7, 2003
1.0.0
  - Initial release
  - October 6, 2003
